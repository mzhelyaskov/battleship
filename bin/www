#!/usr/bin/env node

/**
 * Module dependencies.
 */
var httpApp = require('../httpApp');
var wsApp = require('../wsApp');
var debug = require('debug')('BattleSea:server');
var http = require('http');
var WebSocketServer = require('ws').Server;
var config = require('../config');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || config.get('port'));
httpApp.set('port', port);

/**
 * Create HTTP server.
 */
var httpServer = http.createServer(httpApp);
httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

/**
 * Create WebSocket Server
 */
var wsServer = new WebSocketServer({server: server});
wsServer.on('connection', wsApp);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(value) {
  var port = parseInt(value, 10);
  if (isNaN(port)) {
    // named pipe
    return value;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
